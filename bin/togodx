#!/usr/bin/env ruby

require 'bundler/setup'
require 'thor'
require 'thor/group'

class Init < Thor
  include Thor::Actions

  source_root File.expand_path('../templates', __dir__)

  desc 'config', 'Initialize application config'

  def config
    input = ask('Select database', default: 'sqlite', limited_to: %w[sqlite postgresql])

    db = case input
         when 'sqlite'
           'sqlite3'
         when 'postgresql'
           'pg'
         else
           raise ''
         end

    template "database.#{db}.yml.tt", 'config/database.yml'
  end

  REPO = 'https://github.com/dsatoh/nested_set_indexer'
  LATEST_RELEASE = "#{REPO}/releases/latest"
  PROG_NAME = 'nested_set_indexer'

  desc 'bin', 'Install dependent binary'

  def bin
    require 'json'
    require 'open-uri'
    require 'zip'

    ostype = run 'uname -s', verbose: false, capture: true
    cputype = run 'uname -m', verbose: false, capture: true

    ostype = case ostype&.chomp!
             when 'Darwin'
               'apple-darwin'
             when 'Linux'
               'unknown-linux-gnu'
             else
               raise "unrecognized OS type: #{ostype}"
             end

    cputype = case cputype&.chomp!
              when 'aarch64', 'arm64'
                'aarch64'
              when 'x86_64', 'x86-64', 'x64', 'amd64'
                'x86_64'
              else
                raise "unknown CPU type: #{cputype}"
              end

    response = URI.open(LATEST_RELEASE, 'Accept' => 'application/json')
    tag_name = JSON.parse(response&.read)['tag_name']
    url = URI.parse("#{REPO}/releases/download/#{tag_name}/nested_set_indexer-#{cputype}-#{ostype}.zip")

    inside 'vendor/bin', verbose: true do
      remove_file PROG_NAME if File.exist? PROG_NAME

      say "Downloading from #{url.to_s}"
      Zip::File.open_buffer(URI.open(url.to_s)) do |zip|
        zip.each do |entry|
          next unless entry.name == PROG_NAME

          say "Extracting #{entry.name}"
          entry.extract
        end
      end

      chmod PROG_NAME, '+x'
      system "./#{PROG_NAME}", '-V'
    end
  end
end

class TogoDX < Thor
  class << self
    def exit_on_failure?
      true
    end
  end

  Dir.glob(File.expand_path('../lib/tasks/*.thor', __dir__)).each do |f|
    load f
  end

  desc 'attribute', 'Commands for attributes'
  subcommand 'attribute', AttributeTask

  desc 'relation', 'Commands for relations'
  subcommand 'relation', RelationTask

  register(Init, 'init', 'init', 'Initialize application')
end

TogoDX.start
